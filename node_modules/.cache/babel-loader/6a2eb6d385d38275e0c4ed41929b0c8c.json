{"ast":null,"code":"var _jsxFileName = \"/home/scdesign/Downloads/RocketSeat/Ignite/reactJS/Desafios/Desafio03_CriandoHook/src/hooks/useCart.tsx\",\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider(_ref) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  let {\n    children\n  } = _ref;\n  const [cart, setCart] = useState(_s(() => {\n    _s();\n\n    useEffect(() => {\n      api.get('cart').then(response => setCart(response.data.cart));\n    }); // const storagedCart = Buscar dados do localStorage\n    // if (storagedCart) {\n    //   return JSON.parse(storagedCart);\n    // }\n\n    return [];\n  }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"));\n\n  const addProduct = async productId => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  const removeProduct = productId => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  const updateProductAmount = async _ref2 => {\n    let {\n      productId,\n      amount\n    } = _ref2;\n\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(CartProvider, \"FT8hfKNCrJEv3fNrUkekLd5fM/o=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s3();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s3(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/scdesign/Downloads/RocketSeat/Ignite/reactJS/Desafios/Desafio03_CriandoHook/src/hooks/useCart.tsx"],"names":["createContext","useContext","useEffect","useState","api","CartContext","CartProvider","children","cart","setCart","get","then","response","data","addProduct","productId","removeProduct","updateProductAmount","amount","useCart","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AAEA,SAASC,GAAT,QAAoB,iBAApB;;AAmBA,MAAMC,WAAW,gBAAGL,aAAa,CAAkB,EAAlB,CAAjC;AAEA,OAAO,SAASM,YAAT,OAAoE;AAAA;;AAAA;;AAAA,MAA9C;AAAEC,IAAAA;AAAF,GAA8C;AACzE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,IAAY,MAAM;AAAA;;AAEhDD,IAAAA,SAAS,CAAC,MAAM;AACdE,MAAAA,GAAG,CAACM,GAAJ,CAAQ,MAAR,EACGC,IADH,CACQC,QAAQ,IAAIH,OAAO,CAAEG,QAAQ,CAACC,IAAT,CAAcL,IAAhB,CAD3B;AAED,KAHQ,CAAT,CAFgD,CAMhD;AAEA;AACA;AACA;;AAEA,WAAO,EAAP;AACD,GAb+B,kCAAhC;;AAeA,QAAMM,UAAU,GAAG,MAAOC,SAAP,IAA6B;AAC9C,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GAND;;AAQA,QAAMC,aAAa,GAAID,SAAD,IAAuB;AAC3C,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GAND;;AAQA,QAAME,mBAAmB,GAAG,eAGD;AAAA,QAHQ;AACjCF,MAAAA,SADiC;AAEjCG,MAAAA;AAFiC,KAGR;;AACzB,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GATD;;AAWA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEV,MAAAA,IAAF;AAAQM,MAAAA,UAAR;AAAoBE,MAAAA,aAApB;AAAmCC,MAAAA;AAAnC,KADT;AAAA,cAGGV;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;IAlDeD,Y;;KAAAA,Y;AAoDhB,OAAO,SAASa,OAAT,GAAoC;AAAA;;AACzC,QAAMC,OAAO,GAAGnB,UAAU,CAACI,WAAD,CAA1B;AAEA,SAAOe,OAAP;AACD;;IAJeD,O","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    \n    useEffect(() => {\n      api.get('cart')\n        .then(response => setCart (response.data.cart))\n    })\n    // const storagedCart = Buscar dados do localStorage\n\n    // if (storagedCart) {\n    //   return JSON.parse(storagedCart);\n    // }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}